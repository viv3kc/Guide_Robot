TrajectoryPlannerROS:
#  global_frame_id: /map

  # robot params
  acc_lim_x: 0.5 # The x acceleration limit of the robot in meters/sec^2
  acc_lim_theta: 1.0 # The rotational acceleration limit of the robot in radians/sec^2
  max_vel_x: 0.9 # The maximum forward velocity allowed for the base in meters/sec
  max_vel_theta: 1.6 # The maximum rotational velocity allowed for the base in radians/sec
  min_vel_x: 0.1 # The minimum forward velocity allowed for the base in meters/sec
  min_vel_theta: -1.0 # The maximum rotational velocity allowed for the base in radians/sec
  min_in_place_vel_theta: 0.6 # The minimum rotational velocity allowed for the base while performing in-place rotations in radians/sec
  escape_vel: -0.2 # Speed used for driving during escapes in meters/sec
  holonomic_robot: false # holonomic robot can move sideways

  # goal tolerance params
  yaw_goal_tolerance: 0.15 # The tolerance in radians for the controller in yaw/rotation when achieving its goal
  xy_goal_tolerance: 0.15 # The tolerance in meters for the controller in the x & y distance when achieving a goal
  latch_xy_goal_tolerance: false # f goal tolerance is latched, if the robot ever reaches the goal xy location it will simply rotate in place, even if it ends up outside the goal tolerance while it is doing so.

  # forward simulation parameters
  sim_time: 3 # The amount of time to forward-simulate trajectories in seconds
  sim_granularity: 0.025 # The step size, in meters, to take between points on a given trajectory
  angular_sim_granularity: 0.01 # The step size, in radians, to take between angular samples on a given trajectory.
  vx_samples: 6 # The number of samples to use when exploring the x velocity space
  vtheta_samples: 20 # The number of samples to use when exploring the theta velocity space

  # trajectory scoring params
  meter_scoring: true # Whether the gdist_scale and pdist_scale parameters should assume that goal_distance and path_distance are expressed in units of meters or cells.
  dwa: true # Whether to use the Dynamic Window Approach (DWA)_ or whether to use Trajectory Rollout
  pdist_scale: 1.2 # The weighting for how much the controller should stay close to the path it was given, maximal possible value is 5.0
  gdist_scale: 1.0 # The weigthting for how much the controller should attempt to reach its local goal, also controls speed, maximal possible value is 5.0
  occdist_scale: 0.02 # The weighting for how much the controller should attempt to avoid obstacles
  heading_lookahead: 0.65 # How far to look ahead in meters when scoring different in-place-rotation trajectories
  heading_scoring: false # Whether to score based on the robot's heading to the path or its distance from the path
  publish_cost_grid_pc: false # Whether or not to publish the cost grid that the planner will use when planning
  heading_scoring_timestep: 0.8 # How far to look ahead in time in seconds along the simulated trajectory when using heading scoring

  # oscillation prevention parameters
  oscillation_reset_dist: 0.05 # How far the robot must travel in meters before oscillation flags are reset

  # global plan parameters
  prune_plan: true # Defines whether or not to eat up the plan as the robot moves along the path. If set to true, points will fall off the end of the plan once the robot moves 1 meter past them.
